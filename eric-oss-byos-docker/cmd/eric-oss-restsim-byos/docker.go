package main

import (
	"archive/tar"
	"bytes"
	"compress/gzip"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"time"

	"gopkg.in/yaml.v3"
)

func rest_server(w http.ResponseWriter, r *http.Request) {
	fmt.Println(r.Method, r.URL.Path)
	var simName string
	if r.Method == "POST" && strings.Contains(r.URL.Path, "/create-image") {
		bodyCon, _ := ioutil.ReadAll(r.Body)
		r.Body = ioutil.NopCloser(bytes.NewBuffer(bodyCon))
		var data map[string]interface{}
		err := json.Unmarshal(bodyCon, &data)
		helmLink := data["helm"].(string)
		simName = data["simName"].(string)
		signum := data["signum"].(string)
		urlSplit := strings.Split(r.URL.Path, "/")
		client := &http.Client{}
		req, err := http.NewRequest("GET", "http://eric-oss-byos-postgres:5321/download/modb.sql", nil)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		resp, err := client.Do(req)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		fmt.Println(resp)
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		file, err := os.Create("/postgres/modb-" + urlSplit[2] + ".sql")
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		_, err = file.Write(body)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		req, err = http.NewRequest("GET", "http://eric-oss-byos-postgres:5321/download/tmp/modb-"+signum+".csv", nil)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		resp, err = client.Do(req)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		fmt.Println(resp)
		body, err = ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		file, err = os.Create("/postgres/modb-" + urlSplit[2] + ".csv")
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		_, err = file.Write(body)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		fileName := filepath.Base(helmLink)
		resp, err = http.Get(helmLink)
		if err != nil {
			fmt.Println("failed to download OpenAPI spec file: %v", err)
		}
		defer resp.Body.Close()
		content, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Println("failed to read OpenAPI spec file: %v", err)
			w.WriteHeader(400)
			return

		}
		file, err = os.Create("/postgres/" + fileName)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		_, err = file.Write(content)
		if err != nil {
			log.Println("Error creating request:", err)
			w.WriteHeader(400)
			return
		}
		exFileName, err := GetTarFileNames("/postgres/" + fileName)
		if err != nil {
			log.Println(err)
			w.WriteHeader(400)
			return
		}
		fmt.Println("exFileName", exFileName)
		filenameSplit := strings.Split(exFileName, "/")
		fileSplit := strings.Split(fileName, "-")
		verSplit := strings.Split(fileSplit[5], ".")
		strTag, err := strconv.Atoi(verSplit[0])
		if err != nil {
			log.Println(err)
		}
		file, err = os.OpenFile("/postgres/"+filenameSplit[0]+"/README.md", os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0644)
		if err != nil {
			return
		}
		defer file.Close()
		text := "This Helm is generated by " + signum + " at " + time.Now().String()
		_, err = file.WriteString(text + "\n")
		if err != nil {
			return
		}
		log.Println("version:", strTag)
		if strTag <= 75 {
			imageName := "armdocker.rnd.ericsson.se/proj_oss_releases/enm/restsim_byos:" + urlSplit[2]
			err = buildAndPushDockerImage("armdocker.rnd.ericsson.se/proj_oss_releases/enm/restsim_byos", urlSplit[2])
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
			err = updateValues("/postgres/"+filenameSplit[0]+"/templates/postgres-deployment.yaml", "image:", imageName)
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
			err = updateValues("/postgres/"+filenameSplit[0]+"/Chart.yaml", "name:", simName)
			if err != nil {
				log.Println(err)
				w.WriteHeader(200)
				return
			}
			err = updateValues("/postgres/"+filenameSplit[0]+"/Chart.yaml", "version:", "1.0.0-"+urlSplit[2])
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
			cmd := exec.Command("helm", "package", "/postgres/"+filenameSplit[0])
			cmd.Dir = "/postgres"
			err = cmd.Run()
			fmt.Println(cmd, err)
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
			err = nexusPush("byos/", filenameSplit[0]+"-1.0.0-"+urlSplit[2]+".tgz")
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
		} else {
			err := updateValues("/postgres/"+filenameSplit[0]+"/values.yaml", "fetch:", "enabled")
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}

			err = nexusPush("dataset/", "modb-"+urlSplit[2]+".csv")
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
			replaceURL := "https://arm901-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/simnet/com/ericsson/restsim/dataset/modb-" + urlSplit[2] + ".csv"

			err = updateValues("/postgres/"+filenameSplit[0]+"/values.yaml", "datasetURL:", replaceURL)
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
			err = updateYAMLValue("/postgres/"+filenameSplit[0]+"/Chart.yaml", "name", simName)
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
			err = updateYAMLValue("/postgres/"+filenameSplit[0]+"/Chart.yaml", "version", "1.0.0-"+urlSplit[2])
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
			cmd := exec.Command("helm", "package", "/postgres/"+filenameSplit[0])
			cmd.Dir = "/postgres"
			err = cmd.Run()
			fmt.Println(cmd, err)
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
				//os.Exit(1)
			}
			err = nexusPush("byos/", simName+"-1.0.0-"+urlSplit[2]+".tgz")
			if err != nil {
				log.Println(err)
				w.WriteHeader(400)
				return
			}
		}
		err = os.RemoveAll("/postgres/" + filenameSplit[0])
		if err != nil {
			log.Println(err)
		}
		err = os.RemoveAll("/postgres/" + simName + "-1.0.0-" + urlSplit[2] + ".tgz")
		if err != nil {
			log.Println(err)
		}
		err = os.RemoveAll("/postgres/" + "modb-" + urlSplit[2] + ".csv")
		if err != nil {
			log.Println(err)
		}

	} else if r.Method == "GET" && strings.Contains(r.URL.Path, "/get-helm") {
		urlSplit := strings.Split(r.URL.Path, "/")
		file, err := os.Open("/postgres/" + urlSplit[2])
		if err != nil {
			log.Println(err)
		}
		byteResult, err := ioutil.ReadAll(file)
		if err != nil {
			log.Println(err)
		}
		w.Write(byteResult)
	}
}
func GetTarFileNames(tgzFilePath string) (string, error) {
	tgzFile, err := os.Open(tgzFilePath)
	if err != nil {
		return "", fmt.Errorf("failed to open .tgz file: %v", err)
	}
	defer tgzFile.Close()

	gzipReader, err := gzip.NewReader(tgzFile)
	if err != nil {
		return "", fmt.Errorf("failed to create gzip reader: %v", err)
	}
	defer gzipReader.Close()

	tarReader := tar.NewReader(gzipReader)

	var fileName string

	for {
		header, err := tarReader.Next()
		if err == io.EOF {
			break
		}
		if err != nil {
			fmt.Println("Failed to read tar header:", err)
			return "", err
		}

		fileName = header.Name
		if header.Typeflag == tar.TypeDir {
			continue
		}
		dirPath := filepath.Dir("/postgres/" + fileName)
		err = os.MkdirAll(dirPath, os.ModePerm)
		if err != nil {
			fmt.Println("Failed to create directory:", err)
			return "", err
		}
		newFile, err := os.Create("/postgres/" + fileName)
		if err != nil {
			fmt.Println("Failed to create file:", err)
			return "", err
		}
		defer newFile.Close()

		_, err = io.Copy(newFile, tarReader)
		if err != nil {
			fmt.Println("Failed to write content to file:", err)
			return "", err
		}

		fmt.Println("File extracted:", fileName)
	}

	return fileName, nil
}
func main() {
	var F, e = os.OpenFile("/tmp/restsim.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	if e != nil {
		log.Println(e)
	}
	log.SetOutput(F)
	http.HandleFunc("/", rest_server)
	log.Printf("Starting server for testing HTTP POST...\n")
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal(err)
	}
}
func buildAndPushDockerImage(imageName, tag string) error {
	err := os.Chdir("/postgres")
	if err != nil {
		return fmt.Errorf("failed to change directory: %v", err)
	}

	buildCmd := exec.Command("docker", "build", "-t", imageName+":"+tag, ".")
	buildCmd.Stdout = os.Stdout
	buildCmd.Stderr = os.Stderr
	err = buildCmd.Run()
	if err != nil {
		return fmt.Errorf("failed to build Docker image: %v", err)
	}

	pushCmd := exec.Command("docker", "push", imageName+":"+tag)
	pushCmd.Stdout = os.Stdout
	pushCmd.Stderr = os.Stderr
	err = pushCmd.Run()
	if err != nil {
		return fmt.Errorf("failed to push Docker image: %v", err)
	}

	return nil
}
func updateValues(filePath string, name string, newPassword string) error {
	content, err := ioutil.ReadFile(filePath)
	if err != nil {
		return err
	}

	exp := fmt.Sprintf(`(?m)^(\s*%s\s*).*`, name)
	re := regexp.MustCompile(exp)

	updatedContent := re.ReplaceAllString(string(content), "${1}"+newPassword)

	err = ioutil.WriteFile(filePath, []byte(updatedContent), 0644)
	if err != nil {
		return err
	}

	return nil
}

func nexusPush(path string, filename string) error {
	url := "https://arm901-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/simnet/com/ericsson/restsim/" + path + filename
	username := "simnet"
	password := "simnet01"
	filePath := "/postgres/" + filename
	cmd := exec.Command(
		"curl",
		"-u", fmt.Sprintf("%s:%s", username, password),
		"--upload-file", filePath,
		url,
	)

	cmd.Env = append(os.Environ(), "CURL_PROGRESS_BAR=")

	output, err := cmd.CombinedOutput()
	if err != nil {
		return err
	}

	fmt.Println(string(output))
	return nil
}
func updateYAMLValue(filePath string, key string, newValue interface{}) error {
	yamlFile, err := ioutil.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("Error reading YAML file: %v", err)
	}

	var data map[interface{}]interface{}
	err = yaml.Unmarshal(yamlFile, &data)
	if err != nil {
		return fmt.Errorf("Error unmarshaling YAML: %v", err)
	}

	if _, ok := data[key]; ok {
		data[key] = newValue
	} else {
		return fmt.Errorf("Key '%s' does not exist in YAML", key)
	}

	updatedYAML, err := yaml.Marshal(&data)
	if err != nil {
		return fmt.Errorf("Error marshaling YAML: %v", err)
	}

	err = ioutil.WriteFile(filePath, updatedYAML, 0644)
	if err != nil {
		return fmt.Errorf("Error writing YAML file: %v", err)
	}

	return nil
}
